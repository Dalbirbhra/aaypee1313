<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="12" tokens="315">
<file line="164" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="226" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _URL_SAFE_ALPHABET =
    {
      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',
      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',
      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U', 
      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',
      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',
      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',
      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', 
      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',
      (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', 
      (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'-', (byte)'_'
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="309">
<file line="281" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/JavaLogFactory.java"/>
<file line="254" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/Log4JLogFactory.java"/>
<codefragment>
<![CDATA[
        	if (!jlogger.isEnabledFor( level )) return;
       	
        	User user = ESAPI.authenticator().getCurrentUser();
            
            // create a random session number for the user to represent the user's 'session', if it doesn't exist already
            String userSessionIDforLogging = "unknown";

            try {
                HttpSession session = ESAPI.httpUtilities().getCurrentRequest().getSession( false );
                userSessionIDforLogging = (String)session.getAttribute("ESAPI_SESSION");
                // if there is no session ID for the user yet, we create one and store it in the user's session
	            if ( userSessionIDforLogging == null ) {
	            	userSessionIDforLogging = ""+ ESAPI.randomizer().getRandomInteger(0, 1000000);
	            	session.setAttribute("ESAPI_SESSION", userSessionIDforLogging);
	            }
            } catch( NullPointerException e ) {
            	// continue
            }
            
            // ensure there's something to log
            if ( message == null ) {
            	message = "";
            }
            
            // ensure no CRLF injection into logs for forging records
            String clean = message.replace( '\n', '_' ).replace( '\r', '_' );
            if ( (ESAPI.securityConfiguration()).getLogEncodingRequired() ) {
            	clean = ESAPI.encoder().encodeForHTML(message);
                if (!message.equals(clean)) {
                    clean += " (Encoded)";
                }
            }
            
            // convert the stack trace into something that can be logged
            if ( throwable != null ) {
            	String fqn = throwable.getClass().getName();
            	int index = fqn.lastIndexOf('.');
            	if ( index > 0 ) fqn = fqn.substring(index + 1);
            	StackTraceElement ste = throwable.getStackTrace()[0];
            	clean += "\n    " + fqn + " @ " + ste.getClassName() + "." + ste.getMethodName() + "(" + ste.getFileName() 
            		+ ":" + ste.getLineNumber() + ")";
            }
            
            // create the message to log
            String msg = "";
            if ( user != null ) {
            	msg = type + "-" + (success ? "SUCCESS" : "FAILURE" ) + " " + user.getAccountName() + "@"+ user.getLastHostAddress() +":" + userSessionIDforLogging + " -- " + clean;
            }
            
            jlogger.log(level, msg, throwable);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="171">
<file line="121" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/JavaScriptCodec.java"/>
<file line="194" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/MySQLCodec.java"/>
<codefragment>
<![CDATA[
	private Character decodeCharacterMySQL( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( first.charValue() != '\\' ) {
			input.reset();
			return null;
		}

		Character second = input.next();
		if ( second == null ) {
			input.reset();
			return null;
		}
		
		if ( second.charValue() == '0' ) {
			return new Character( (char)0x00 );
		} else if ( second.charValue() == 'b' ) {
			return new Character( (char)0x08 );
		} else if ( second.charValue() == 't' ) {
			return new Character( (char)0x09 );
		} else if ( second.charValue() == 'n' ) {
			return new Character( (char)0x0a );
		} else if ( second.charValue() == 'r' ) {
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="155">
<file line="78" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/CSSCodec.java"/>
<file line="88" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/JavaScriptCodec.java"/>
<codefragment>
<![CDATA[
	}

	/**
	 * {@inheritDoc}
	 * 
	 * Decodes a String that has been encoded for use in a JavaScript context.
	 */
	public String decode( String input ) {
		StringBuffer sb = new StringBuffer();
		PushbackString pbs = new PushbackString( input );
		while ( pbs.hasNext() ) {
			Character c = decodeCharacter( pbs );
			if ( c != null ) {
				sb.append( c );
			} else {
				sb.append( pbs.next() );
			}
		}
		return sb.toString();
	}


	/**
	 * {@inheritDoc}
	 * 
	 * Returns the decoded version of the character starting at index, or
	 * null if no decoding is possible.
	 * 
	 * Formats all are legal both upper/lower case:
	 *   \\a - special characters
	 *   \\xHH
	 *   \\uHHHH
	 */
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}

		// if this is not an encoded character, return null
		if ( first.charValue() != '\\' ) {
			input.reset();
			return null;
		}

		Character second = input.next();
		if ( second == null ) {
			input.reset();
			return null;
		}

		if ( second.charValue() == '0' ) {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="154">
<file line="235" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/DefaultValidator.java"/>
<file line="291" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/DefaultValidator.java"/>
<codefragment>
<![CDATA[
		try {
			if ( antiSamyPolicy == null ) {
				if (ESAPI.securityConfiguration().getResourceDirectory() == null) {
					
					//load via classpath
			    	ClassLoader loader = getClass().getClassLoader();
			        
			        InputStream in = null;
			        try {
			            in = loader.getResourceAsStream("antisamy-esapi.xml");
			            if (in != null) {
			            	antiSamyPolicy = Policy.getInstance(in);
			            }
			        } catch (Exception e) {
			        	antiSamyPolicy = null;
			            
			        } finally {
			            if (in != null) try { in.close (); } catch (Throwable ignore) {}
			        }
			        
			        if (antiSamyPolicy == null) {
			            throw new IllegalArgumentException ("Can't load antisamy-esapi.xml as a classloader resource");
			        }
			        
				} else {
					//load via fileio
					antiSamyPolicy = Policy.getInstance( ESAPI.securityConfiguration().getResourceDirectory() + "antisamy-esapi.xml");
				}
			}
			AntiSamy as = new AntiSamy();
			CleanResults test = as.scan(input, antiSamyPolicy);
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="138">
<file line="78" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/CSSCodec.java"/>
<file line="53" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/UnixCodec.java"/>
<codefragment>
<![CDATA[
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * Decodes a String that has been encoded with \ 
	 */
	public String decode( String input ) {
		StringBuffer sb = new StringBuffer();
		PushbackString pbs = new PushbackString( input );
		while ( pbs.hasNext() ) {
			Character c = decodeCharacter( pbs );
			if ( c != null ) {
				sb.append( c );
			} else {
				sb.append( pbs.next() );
			}
		}
		return sb.toString();
	}
	
	
	/**
	 * {@inheritDoc}
	 * 
	 * Returns the decoded version of the character starting at index, or
	 * null if no decoding is possible.
	 * <p>
	 * Formats all are legal both upper/lower case:
	 *   \x - all special characters
	 *   
	 */
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( first.charValue() != '\\' ) {
			input.reset();
			return null;
		}

		Character second = input.next();
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="137">
<file line="243" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="309" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _ORDERED_DECODABET =
    {   
      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8
      -5,-5,                                      // Whitespace: Tab and Linefeed
      -9,-9,                                      // Decimal 11 - 12
      -5,                                         // Whitespace: Carriage Return
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26
      -9,-9,-9,-9,-9,                             // Decimal 27 - 31
      -5,                                         // Whitespace: Space
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42
      -9,                                         // Plus sign at decimal 43
      -9,                                         // Decimal 44
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="133">
<file line="166" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="295" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
      (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',
      (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',
      (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U',
      (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',
      (byte)'_',
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="131">
<file line="183" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="243" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
    private final static byte[] _URL_SAFE_DECODABET =
    {   
      -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8
      -5,-5,                                      // Whitespace: Tab and Linefeed
      -9,-9,                                      // Decimal 11 - 12
      -5,                                         // Whitespace: Carriage Return
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26
      -9,-9,-9,-9,-9,                             // Decimal 27 - 31
      -5,                                         // Whitespace: Space
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="130">
<file line="169" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="299" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
      (byte)'_',
      (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',
      (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',
      (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u',
      (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z'
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="122">
<file line="91" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/IntegerAccessReferenceMap.java"/>
<file line="103" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/RandomAccessReferenceMap.java"/>
<codefragment>
<![CDATA[
	}
	
	/**
	* {@inheritDoc}
	*/
	public String removeDirectReference(Object direct) throws AccessControlException {
		String indirect = (String)dtoi.get(direct);
		if ( indirect != null ) {
			itod.remove(indirect);
			dtoi.remove(direct);
		}
		return indirect;
	}

	/**
	* {@inheritDoc}
	*/
	final public void update(Set directReferences) {
		HashMap dtoi_old = (HashMap) dtoi.clone();
		dtoi.clear();
		itod.clear();

		Iterator i = directReferences.iterator();
		while (i.hasNext()) {
			Object direct = i.next();

			// get the old indirect reference
			String indirect = (String) dtoi_old.get(direct);

			// if the old reference is null, then create a new one that doesn't
			// collide with any existing indirect references
			if (indirect == null) {
				indirect = getUniqueRandomReference();
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="121">
<file line="59" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/OracleCodec.java"/>
<file line="52" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/UnixCodec.java"/>
<file line="54" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/VBScriptCodec.java"/>
<file line="52" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/WindowsCodec.java"/>
<codefragment>
<![CDATA[
        return "^" + c;
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * Decodes a String that has been encoded with ^ 
	 */
	public String decode( String input ) {
		StringBuffer sb = new StringBuffer();
		PushbackString pbs = new PushbackString( input );
		while ( pbs.hasNext() ) {
			Character c = decodeCharacter( pbs );
			if ( c != null ) {
				sb.append( c );
			} else {
				sb.append( pbs.next() );
			}
		}
		return sb.toString();
	}

	/**
	 * {@inheritDoc}
	 * 
	 * Returns the decoded version of the character starting at index, or
	 * null if no decoding is possible.
	 * <p>
	 * Formats all are legal both upper/lower case:
	 *   ^x - all special characters
	 */
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( first.charValue() != '^' ) {
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="121">
<file line="87" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/JavaScriptCodec.java"/>
<file line="138" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/PercentCodec.java"/>
<codefragment>
<![CDATA[
		return sb.toString();
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * Decode string encoded with percent characters
	 * 
	 * @param input
	 * 			encoded string using percent characters (such as URL encoding)
	 */
	public String decode( String input ) {
		StringBuffer sb = new StringBuffer();
		PushbackString pbs = new PushbackString( input );
		while ( pbs.hasNext() ) {
			Character c = decodeCharacter( pbs );
			if ( c != null ) {
				sb.append( c );
			} else {
				sb.append( pbs.next() );
			}
		}
		return sb.toString();
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * Formats all are legal both upper/lower case:
	 *   %hh;
	 *   
	 * @param input
	 * 			encoded character using percent characters (such as URL encoding)
	 */
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( first.charValue() != '%' ) {
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="119">
<file line="78" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/CSSCodec.java"/>
<file line="77" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/HTMLEntityCodec.java"/>
<file line="60" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/OracleCodec.java"/>
<codefragment>
<![CDATA[
	}

	/**
	 * {@inheritDoc}
	 * 
	 * Decodes quote-encoded string
	 */
	public String decode( String input ) {
		StringBuffer sb = new StringBuffer();
		PushbackString pbs = new PushbackString( input );
		while ( pbs.hasNext() ) {
			Character c = decodeCharacter( pbs );
			if ( c != null ) {
				sb.append( c );
			} else {
				sb.append( pbs.next() );
			}
		}
		return sb.toString();
	}
	
	/**
	 * {@inheritDoc}
	 *
	 * Returns the decoded version of the character starting at index, or
	 * null if no decoding is possible.
	 *
	 * Formats all are legal
	 *   '' decodes to '
	 */
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}

		// if this is not an encoded character, return null
		if ( first.charValue() != '\'' ) {
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="106">
<file line="195" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<file line="257" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/Base64.java"/>
<codefragment>
<![CDATA[
      -9,                                         // Slash at decimal 47
      52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine
      -9,-9,-9,                                   // Decimal 58 - 60
      -1,                                         // Equals sign at decimal 61
      -9,-9,-9,                                   // Decimal 62 - 64
      0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'
      14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'
      -9,-9,-9,-9,                                // Decimal 91 - 94
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="105">
<file line="512" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/FileBasedAccessController.java"/>
<file line="567" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/reference/FileBasedAccessController.java"/>
<codefragment>
<![CDATA[
	private Map loadDataRules(String ruleset) {
		Map map = new HashMap();
		InputStream is = null;

		try {
			is = new FileInputStream(new File(ESAPI.securityConfiguration().getResourceDirectory(), ruleset));
			String line = "";
			while ((line = ESAPI.validator().safeReadLine(is, 500)) != null) {
				if (line.length() > 0 && line.charAt(0) != '#') {
					Rule rule = new Rule();
					String[] parts = line.split("\\|");
					rule.clazz = Class.forName(parts[0].trim());
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="103">
<file line="158" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/MySQLCodec.java"/>
<file line="90" path="/home/schallee/devel/java/esapi/trunk-1.4/src/main/java/org/owasp/esapi/codecs/OracleCodec.java"/>
<codefragment>
<![CDATA[
	public Character decodeCharacter( PushbackString input ) {
		input.mark();
		Character first = input.next();
		if ( first == null ) {
			input.reset();
			return null;
		}

		// if this is not an encoded character, return null
		if ( first.charValue() != '\'' ) {
			input.reset();
			return null;
		}

		Character second = input.next();
		if ( second == null ) {
			input.reset();
			return null;
		}
		
		// if this is not an encoded character, return null
		if ( second.charValue() != '\'' ) {
			input.reset();
			return null;
		}
		return( new Character( '\'' ) );
	}
]]>
</codefragment>
</duplication>
</pmd-cpd>