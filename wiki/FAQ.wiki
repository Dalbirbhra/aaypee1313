#sidebar TableOfContents

== Why is application security hard? ==

Most developers are not taught security in school, so they only know a very small number of the 695 weakness types that MITRE has catalogued. Most never really receive any security feedback on the job, because by the time a vulnerability in their code is found, they’re already off on the next project. In order to write secure code today, developers an impossible amount to learn about application specific attacks, security controls, and vulnerabilities. You can’t expect developers to wake up one day and think to himself, “hey – SQL injection! I bet an attacker could insert SQL code in this field that would modify the meaning of my queries!” All of those 695 weakness types are like that. They’re not obvious to people, and many are actually quite tricky for the experts.

== Which applications are at risk? ==

What’s most important to secure, Internet-facing applications or intranet apps? Most people think that the biggest risks come from the Internet-facing applications, but that may not be true. Intranet applications are less likely to be attacked because the pool of threat agents (insiders) is smaller. But the functions and assets are often quite a bit more critical – private data, trade secrets, financials, and business plans. So the risk is frequently higher for intranet applications. 

This risk rating calculus used to be fairly simple. You used to be able to identify which applications contained the most sensitive assets and were exposed to the most attackers, and that would tell you which ones were the most risky. 

Unfortunately, in most enterprises, many applications are connected. There are many types of connections. The simplest is when two applications actually talk to each other. But if a user can access both through their browser, they’re also connected. If you have single sign on (SSO) in your enterprise, then all your applications are connected through your employee’s browsers. Another way applications are connected is when they are cohosted, sharing an operating system. A weakness in one application could compromise another more sensitive application. Or perhaps applications share a backend system, and an attack could propagate from one system to another. 

Only in the past few years have many organizations started to realize the risk that vulnerabilities in their “internal” applications pose to their business.
